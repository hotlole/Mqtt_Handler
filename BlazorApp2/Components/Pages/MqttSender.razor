@page "/MqttSender"
@using BlazorApp2.Service
@inject MqttService MqttService

<div class="mqtt-sender-container">
    <div class="mqtt-sender-card">
        <h2 class="mqtt-sender-title">MQTT Sender</h2>

        <EditForm Model="@this" OnValidSubmit="SendMessage" FormName="MqttSendForm">
            <div class="form-group">
                <label class="form-label">Топик:</label>
                <InputText @bind-Value="topic" class="form-input" placeholder="Введите топик" />
            </div>

            <div class="form-group">
                <label class="form-label">Сообщение:</label>
                <InputText @bind-Value="message" class="form-input" placeholder="Введите сообщение" />
            </div>

            <button type="submit" disabled="@isSending" class="submit-button">
                @(isSending ? "Отправка..." : "Отправить")
            </button>
        </EditForm>

        @if (!string.IsNullOrEmpty(status))
        {
            <div class="status-message" style="background-color: @(statusColor == "green" ? "#d4edda" : "#f8d7da"); color: @(statusColor == "green" ? "#155724" : "#721c24");">
                @status
            </div>
        }
    </div>
</div>


@code {
    private string topic { get; set; } = "123"; // Топик будет вводиться пользователем
    private string message { get; set; } = "test"; // Сообщение будет вводиться пользователем
    private string status { get; set; } = ""; // Статус отправки
    private string statusColor { get; set; } = "black"; // Цвет статуса
    private bool isSending { get; set; } = false; // Флаг для блокировки кнопки

    private async Task SendMessage()
    {
        if (isSending) return; // Предотвращаем многократные отправки
        isSending = true;

        // Отладочное сообщение
        Console.WriteLine($"Топик: '{topic}', Сообщение: '{message}'");

        // Проверяем подключение перед отправкой сообщения
        if (!MqttService.IsConnected())
        {
            status = "❌ MQTT клиент не подключен!";
            statusColor = "red";
            isSending = false;
            return;
        }

        // Проверяем, что топик и сообщение не пустые
        if (string.IsNullOrWhiteSpace(topic) || string.IsNullOrWhiteSpace(message))
        {
            status = "❌ Топик и сообщение не могут быть пустыми!";
            statusColor = "red";
            isSending = false;
            return;
        }

        try
        {
            bool success = await MqttService.PublishMessage(topic, message);

            if (success)
            {
                status = $"✅ Отправлено в {topic}: {message}";
                statusColor = "green";
            }
            else
            {
                status = "❌ Ошибка отправки сообщения!";
                statusColor = "red";
            }
        }
        catch (Exception ex)
        {
            status = $"❌ Ошибка: {ex.Message}";
            statusColor = "red";
        }
        finally
        {
            isSending = false; // Разблокируем кнопку после завершения отправки
        }
    }
}